@page "/doacao/index/{id}/{boleto}"
@using Operacao.Shared.Models
@using Operacao.Shared.Utils
@using Operacao.Shared.Models.PagSeguro
@inject HttpClient Http
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@using System.Text.Json.Serialization;
@using System.Text.Json;

<h3>Lançar Doação</h3>
<hr />

<a href="javascript:history.back()">Voltar</a>

@foreach (string erro in erros)
{
    <div class="alert alert-danger" role="alert">
        @erro
    </div>
}

<form method="post" @onsubmit="Submit">
    <input type="hidden" @bind="Id" name="id" />
    <div class="form-row">
        <div class="col">
            <label>Data 1 Doação</label>

            @if (Boleto == "true")
            {
                <input class="form-control" type="date" min="@Converter.TimeZone(DateTime.UtcNow).AddDays(1).ToString("yyyy-MM-dd")" max="@Converter.TimeZone(DateTime.UtcNow).AddDays(30).ToString("yyyy-MM-dd")" @bind-value="@parcela.DtVencimento" required name="dtDoacao" />
            }
            else
            {
                <input class="form-control" type="date" min="@Converter.TimeZone(DateTime.UtcNow).ToString("yyyy-MM-dd")" @bind-value="@parcela.DtVencimento" required name="dtDoacao" />
            }

        </div>

        <div class="col">
            <label>Valor</label>
            <input class="form-control" type="text" required name="valor" @bind="@parcela.Valor" />
        </div>
        <div class="col">
            <label>Categoria</label>
            <select class="form-control" name="categoria" @bind="@categoria">
                @foreach (Categoria categoria in categorias)
                {
                    <option>@categoria.Descricao</option>
                }
            </select>
        </div>
        <div class="col">
            <label>Qtd. Doações</label>
            <input class="form-control" type="number" min="1" max="24" required name="qtdDoacoes" @bind-value="@qtdDoacoes" />
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label>Data Retorno</label>
            <input class="form-control" type="date" name="dtRetorno" @bind-value="@dtRetorno" />
        </div>
        <div class="col">
            <label>Qtd. Cupons</label>
            <input class="form-control" type="number" min="0" name="qtdCupons" @bind-value="@parcela.QtdCupons" />
        </div>
        <div class="col" style="margin-top:30px;">
            <button type="submit" class="btn btn-success">Lançar Doações</button>
        </div>
    </div>
</form>

@if (loading == true)
{
    <img src="imgs/carregando.gif" />
}

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Boleto { get; set; }

    private Funcionario usuario;
    private Parcela parcela = new Parcela();
    private List<Categoria> categorias = new List<Categoria>();
    private string categoria = "A-Especial";
    private DateTime? dtRetorno;
    private int qtdDoacoes = 1;
    private int matricula;
    private DoadNovo doadNovo;
    private Credencial credencial;

    bool loading = false;

    List<string> erros = new List<string>();

    string message = "";

    protected override async Task OnInitializedAsync()
    {
        usuario = sessionStorage.GetItem<Funcionario>("usuario");

        if (usuario == null || usuario.Id == 0)
        {
            NavManager.NavigateTo("/");
        }

        if (Boleto == "true")
        {
            await BuscarCredenciaisBoleto();
        }

        parcela.DtVencimento = Converter.TimeZone(DateTime.UtcNow);
        categorias = await Http.GetFromJsonAsync<List<Categoria>>("api/categoria/");
        doadNovo = await Http.GetFromJsonAsync<DoadNovo>("api/doadnovo/buscarporid2/" + Id);
    }

    private async Task Submit()
    {
        erros.Clear();
        if (Boleto == "true")
        {
            loading = true;
            await EnviarBoleto();
            loading = false;
            if (erros.Count > 0)
            {
                return;
            }
            //return;
        }

        await InserirCliente();
        await DeletarDoadNovo();
        await InserirAcaoDoadNovo();
        await GerarParcelas();

        NavManager.NavigateTo("/doacao/consulta/" + matricula);
    }

    private async Task InserirAcaoDoadNovo()
    {
        AcaoDoadNovo acaoDoadNovo = new AcaoDoadNovo
        {
            PessoaId = Convert.ToInt32(Id),
            Telefone = "",
            Descricao = "Contribuiu",
            Dt = Converter.TimeZone(DateTime.UtcNow),
            FuncionarioId = usuario.Id
        };

        await Http.PostAsJsonAsync<AcaoDoadNovo>("api/AcaoDoadNovo", acaoDoadNovo);
    }

    private async Task InserirCliente()
    {
        Contribuinte contribuinte = new Contribuinte
        {
            Nome = doadNovo.Nome,
            DtNascimento = doadNovo.DtNascimento,
            Numero = doadNovo.Numero,
            Telefone = doadNovo.Telefone,
            ObsOperacao = doadNovo.ObsOperacao,
            ObsMensageiros = doadNovo.ObsMensageiros,
            ObsCoordenacao = doadNovo.ObsCoordenacao,
            Sexo = doadNovo.Sexo,
            Complemento = doadNovo.Complemento,
            PontoReferencia = doadNovo.PontoReferencia,
            DtRetorno = Converter.TimeZone(DateTime.UtcNow),
            Email = doadNovo.Email,
            Na = 0,
            Celular1 = doadNovo.Celular1,
            Celular2 = doadNovo.Celular2,
            DtCadastramento = Converter.TimeZone(DateTime.UtcNow),
            Endereco = doadNovo.Endereco,
            Bairro = doadNovo.Bairro,
            Cidade = doadNovo.Cidade,
            Categoria = categoria,
            Cpf = doadNovo.Cpf,
            Origem = doadNovo.Origem,
            FuncionarioId = usuario.Id
        };

        await Http.PostAsJsonAsync<Contribuinte>("api/contribuinte", contribuinte);
        matricula = await Http.GetFromJsonAsync<int>("api/contribuinte/buscarUltimoId/");
    }

    private async Task DeletarDoadNovo()
    {
        //await Http.PutAsJsonAsync<DoadNovo>("api/doadNovo/desativar/" + doadNovo.Id, doadNovo);
        await Http.DeleteAsync("api/doadNovo/" + Id);
    }

    private async Task GerarParcelas()
    {
        int idContrato = await Http.GetFromJsonAsync<int>("api/contrato/buscarUltimoId") + 1;

        Contrato contrato = new Contrato
        {
            Id = idContrato,
            BytMeses = 1,
            BytParcelas = qtdDoacoes,
            ContribuinteId = matricula,
            DtContrato = Converter.TimeZone(DateTime.UtcNow),
            DtLigacao = Converter.TimeZone(DateTime.UtcNow),
            Valor = parcela.Valor,
            FuncionarioId = usuario.Id
        };

        await Http.PostAsJsonAsync<Contrato>("api/contrato/", contrato);

        for (int i = 0; i < qtdDoacoes; i++)
        {
            bool boleto = Boleto == "true" ? true : false;
            bool impresso = boleto == true ? true : false;
            DateTime? dtImpresso = boleto == true ? Converter.ToDateTime(DateTime.Now) : null;

            Parcela parcela2 = new Parcela
            {
                ContribuinteId = matricula,
                BytParcela = i + 1,
                DtVencimento = parcela.DtVencimento.AddMonths(i),
                Valor = parcela.Valor,
                FuncionarioId = usuario.Id,
                ContratoId = idContrato,
                QtdCupons = parcela.QtdCupons,
                Boleto = boleto,
                Impresso = impresso,
                DtImpressao = dtImpresso
            };
            await Http.PostAsJsonAsync<Parcela>("api/parcela", parcela2);
        }

        DateTime dtRetorno2 = parcela.DtVencimento.AddMonths(qtdDoacoes);

        if (dtRetorno.HasValue)
        {
            dtRetorno2 = dtRetorno.Value;
        }

        await Http.GetAsync("api/contribuinte/atualizaRetorno/" + matricula + "/" + dtRetorno2.ToString("yyyy-MM-dd HH:mm"));

        await Http.PostAsJsonAsync<Parcela>("api/doadnovo/inserirResultado/", parcela);
    }

    async Task BuscarCredenciaisBoleto()
    {
        credencial = await Http.GetFromJsonAsync<Credencial>("api/boleto");
    }

    async Task EnviarBoleto()
    {
        string tipoDoc = "CPF";
        if (doadNovo.Sexo == "Empresa")
        {
            tipoDoc = "CNPJ";
        }

        Address address = new Address
        {
            Street = doadNovo.Endereco,
            District = doadNovo.Bairro,
            City = doadNovo.Cidade,
            Number = doadNovo.Numero,
            State = credencial.UF,
            PostalCode = "17208110"
        };

        Document document = new Document
        {
            Type = tipoDoc,
            Value = doadNovo.Cpf
        };

        Phone phone = new Phone
        {
            AreaCode = credencial.DDD,
            Number = doadNovo.Telefone
        };

        Customer doador = new Customer
        {
            Address = address,
            Document = document,
            Name = doadNovo.Nome,
            Email = doadNovo.Email,
            Phone = phone
        };

        Boleto boleto = new Boleto
        {
            Periodicity = "monthly",
            Reference = "Telefone " + doadNovo.Telefone,
            FirstDueDate = parcela.DtVencimento.ToString("yyyy-MM-dd"),
            NumberOfPayments = 1,
            Amount = parcela.Valor,
            Customer = doador,
            Description = "Doacao"
        };

        message = JsonSerializer.Serialize(boleto);

        var result = await Http.PostAsJsonAsync<Boleto>("api/boleto", boleto);
        if (result.IsSuccessStatusCode)
        {
            message = await result.Content.ReadAsStringAsync();

            Console.WriteLine(await result.Content.ReadAsStringAsync());

            BoletoParcela boletoParcela = new BoletoParcela
            {
                ParcelaId = await Http.GetFromJsonAsync<int>("api/parcela/ultimoId") + 1,
                CodBoleto = "584fgj4t84t948304",
                Link = "google.com"
            };

            await Http.PostAsJsonAsync<BoletoParcela>("api/boleto/boletoparcela/", boletoParcela);
        }
        else
        {
            message = await result.Content.ReadAsStringAsync();
            Errors myDeserializedClass = JsonSerializer.Deserialize<Errors>(message);

            foreach (Error erro in myDeserializedClass.errors)
            {
                erros.Add(erro.Message);
            }
        }



        //return;
    }

}
