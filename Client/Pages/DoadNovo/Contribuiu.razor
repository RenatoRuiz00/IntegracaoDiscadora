@page "/doadNovo/contribuiu/{id}/{boleto}"

@using Operacao.Shared.Models
@using Operacao.Shared.Utils
@inject HttpClient Http
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@using Blazored.Typeahead
@inject IJSRuntime JsRuntime

@if (erros != null && erros.Count > 0)
{
    foreach (string erro in erros)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>@erro</strong>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true"></span>
            </button>
        </div>
    }
}

<form method="post" autocomplete="off" @onsubmit="@Submit">
    <input type="hidden" name="id" @bind="@Id" />

    <div class="form-row">
        <div class="col">
            <label>Telefone</label>
            <input type="text" class="form-control" readonly name="telefone" @bind-value="@doadNovo.Telefone" />
        </div>
        <div class="col">
            <label>Nome</label>
            <input type="text" class="form-control" maxlength="150" required name="nome" @bind-value="@doadNovo.Nome" />
        </div>
        <div class="col">
            <label>Data Nasc.</label>
            <input type="date" class="form-control" name="dtNascimento" @bind-value="@doadNovo.DtNascimento" />
        </div>
        <div class="col">
            <label>Tipo</label>
            <select class="form-control" name="sexo" @bind="@doadNovo.Sexo">
                <option selected>Masculino</option>
                <option>Feminino</option>
                <option>Empresa</option>
            </select>
        </div>
        <div class="col">
            <label>CPF</label>
            <input type="text" class="form-control" name="cpf" @bind-value="@doadNovo.Cpf" />
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label>CEP</label>
            <input type="text" class="form-control" id="cep" name="cep" minlength="8" maxlength="8" @bind-value="@doadNovo.Cep" @onblur="BuscarCep" />
        </div>
        <div class="col">
            <label>Endereço</label>
            <!--<input type="text" class="form-control" id="rua" name="endereco" maxlength="100" required @bind-value="@doadNovo.Endereco" />-->
            <BlazoredTypeahead SearchMethod="BuscarEndereco"
                               @bind-Value="doadNovo.Endereco">
                <SelectedTemplate>
                    @context
                </SelectedTemplate>
                <ResultTemplate>
                    @context
                </ResultTemplate>

                <NotFoundTemplate>
                    Não há resultados
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="col">
            <label>Número</label>
            <input type="text" class="form-control" name="numero" required maxlength="20" @bind-value="@doadNovo.Numero" />
        </div>
        <div class="col">
            <label>Bairro</label>
            <BlazoredTypeahead SearchMethod="BuscarBairro"
                               @bind-Value="doadNovo.Bairro">
                <SelectedTemplate>
                    @context
                </SelectedTemplate>
                <ResultTemplate>
                    @context
                </ResultTemplate>

                <NotFoundTemplate>
                    Não há resultados
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label>Ponto Referência</label>
            <input type="text" class="form-control" maxlength="50" name="pontoRef" @bind-value="@doadNovo.PontoReferencia" />
        </div>
        <div class="col">
            <label>Complemento</label>
            <input type="text" class="form-control" maxlength="50" name="complemento" @bind-value="@doadNovo.Complemento" />
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label>Cidade</label>
            <BlazoredTypeahead SearchMethod="BuscarCidade"
                               @bind-Value="doadNovo.Cidade">
                <SelectedTemplate>
                    @context
                </SelectedTemplate>
                <ResultTemplate>
                    @context
                </ResultTemplate>

                <NotFoundTemplate>
                    Não há resultados
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="col">
            <label>Celular 1</label>
            <input type="text" class="form-control" name="celular1" @bind-value="@doadNovo.Celular1" />
        </div>
        <div class="col">
            <label>Celular 2</label>
            <input type="text" class="form-control" name="celular2" @bind-value="@doadNovo.Celular2" />
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label>Email</label>
            <input type="text" class="form-control" maxlength="50" name="email" @bind-value="@doadNovo.Email" />
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label>Obs. Coordenação</label>
            <textarea class="form-control" maxlength="255" name="obsCoordenacao" @bind="@doadNovo.ObsCoordenacao"></textarea>
        </div>
        <div class="col">
            <label>Obs. Operação</label>
            <textarea class="form-control" maxlength="255" name="obsOperacao" @bind="@doadNovo.ObsOperacao"></textarea>
        </div>
        <div class="col">
            <label>Obs. Mensageiros</label>
            <textarea class="form-control" maxlength="255" name="obsMensageiros" @bind="@doadNovo.ObsMensageiros"></textarea>
        </div>
        <div class="col">
            <button class="btn btn-success" style="margin-top:30px;" type="submit">Salvar</button>
        </div>
    </div>
</form>

<style>
    .blazored-typeahead__input {
        height: calc(1.5em + .75rem + 2px);
    }

    .blazored-typeahead__controls {
        height: calc(1.5em + .75rem + 2px);
    }
</style>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Boleto { get; set; }

    private DoadNovo doadNovo = new DoadNovo();
    private List<string> cidades = new List<string>();
    private List<string> bairros = new List<string>();
    private List<string> enderecos = new List<string>();
    private List<string> erros = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        enderecos = await Http.GetFromJsonAsync<List<string>>("api/endereco/ruas");
        bairros = await Http.GetFromJsonAsync<List<string>>("api/endereco/bairros");
        cidades = await Http.GetFromJsonAsync<List<string>>("api/endereco/cidades");

        doadNovo = await Http.GetFromJsonAsync<DoadNovo>("api/doadnovo/" + Id);
        doadNovo.Sexo = "Masculino";

        await JsRuntime.InvokeVoidAsync("PassarValorClass", "blazored-typeahead__input", 1, doadNovo.Bairro);
        await JsRuntime.InvokeVoidAsync("PassarValorClass", "blazored-typeahead__input", 2, doadNovo.Cidade);
    }

    private async Task Submit()
    {
        erros.Clear();
        Verificacoes();
        if (Boleto == "true")
        {
            VerificarBoleto();
        }

        if (erros.Count == 0)
        {
            await Http.PutAsJsonAsync<DoadNovo>("api/doadnovo/contribuiu/" + Id, doadNovo);

            NavManager.NavigateTo("/doacao/index/" + Id + "/" + Boleto);
        }
    }

    private async Task BuscarCep()
    {
        if (!string.IsNullOrEmpty(doadNovo.Cep))
        {
            try
            {
                LogradouroCep endereco = await Http.GetFromJsonAsync<LogradouroCep>
    ("https://viacep.com.br/ws/" + doadNovo.Cep + "/json");

                await JsRuntime.InvokeVoidAsync("PassarValorClass", "blazored-typeahead__input", 0, endereco.Logradouro);
                await JsRuntime.InvokeVoidAsync("PassarValorClass", "blazored-typeahead__input", 1, endereco.Bairro);
                await JsRuntime.InvokeVoidAsync("PassarValorClass", "blazored-typeahead__input", 2, endereco.Localidade);

                doadNovo.Endereco = endereco.Logradouro;
                doadNovo.Bairro = endereco.Bairro;
                doadNovo.Cidade = endereco.Localidade;
            }
            catch
            {
                await JsRuntime.InvokeVoidAsync("alert", "Não foi possível consultar o endereço, verifique se você inserir um CEP válido!"); // Alert
            }
        }
    }

    private async Task<IEnumerable<string>> BuscarEndereco(string nome)
    {
        return await Task.FromResult(enderecos.Where(x => x.ToUpper().Contains(nome.ToUpper())).ToList());
    }

    private async Task<IEnumerable<string>> BuscarBairro(string nome)
    {
        return await Task.FromResult(bairros.Where(x => x.ToUpper().Contains(nome.ToUpper())).ToList());
    }

    private async Task<IEnumerable<string>> BuscarCidade(string nome)
    {
        return await Task.FromResult(cidades.Where(x => x.ToUpper().Contains(nome.ToUpper())).ToList());
    }

    void Verificacoes()
    {
        if (string.IsNullOrEmpty(doadNovo.Endereco))
        {
            erros.Add("Digite um endereço!");
        }

        if (string.IsNullOrEmpty(doadNovo.Bairro))
        {
            erros.Add("Digite um bairro!");
        }

        if (string.IsNullOrEmpty(doadNovo.Endereco))
        {
            erros.Add("Digite uma cidade!");
        }
    }

    void VerificarBoleto()
    {
        //Verifico se o nome possui mais de 50 caracteres
        if (doadNovo.Nome.Length > 50)
        {
            erros.Add("O nome não pode ter mais de 50 caracteres!");
        }

        if (doadNovo.Nome.IndexOf(' ') < 0)
        {
            erros.Add("Digite o nome completo!");
        }

        //Verifico se é um CNPJ ou CPF válido
        if (!string.IsNullOrEmpty(doadNovo.Cpf))
        {
            if (doadNovo.Sexo == "Empresa")
            {
                if (Validacoes.IsCnpj(doadNovo.Cpf) == false)
                {
                    erros.Add("Digite um CNPJ válido");
                }
            }
            else
            {
                if (Validacoes.IsCpf(doadNovo.Cpf) == false)
                {
                    erros.Add("Digite um CPF válido");
                }
            }
        }
        else
        {
            erros.Add("Insira o CPF ou CNPJ");
        }

        //Verifico se é um email válido
        if (Validacoes.IsValidEmail(doadNovo.Email) == false)
        {
            erros.Add("Digite um email válido");
        }

    }

}
